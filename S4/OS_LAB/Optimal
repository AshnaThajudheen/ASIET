#include <stdio.h>

void optimalPageReplacement(int pages[], int n, int frames) {
    int queue[frames];
    int count = 0, pageFaults = 0;

    for (int i = 0; i < n; i++) {
        int found = 0;

        // Check if page is in memory
        for (int j = 0; j < count; j++) {
            if (queue[j] == pages[i]) {
                found = 1;
                break;
            }
        }

        if (!found) {
            int replaceIndex = 0;

            if (count < frames) {
                replaceIndex = count++;
            } else {
                int farthest = -1;
                for (int j = 0; j < frames; j++) {
                    int nextUse = n;
                    for (int k = i + 1; k < n; k++) {
                        if (queue[j] == pages[k]) {
                            nextUse = k;
                            break;
                        }
                    }
                    if (nextUse > farthest) {
                        farthest = nextUse;
                        replaceIndex = j;
                    }
                }
            }
            queue[replaceIndex] = pages[i];
            pageFaults++;
        }

        // Print current queue state
        printf("Step %d: ", i + 1);
        for (int j = 0; j < count; j++) {
            printf("%d ", queue[j]);
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", pageFaults);
}

int main() {
    int n, frames;

    printf("Enter the number of pages: ");
    scanf("%d", &n);
    int pages[n];

    printf("Enter the page reference string: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter the number of frames: ");
    scanf("%d", &frames);

    optimalPageReplacement(pages, n, frames);

    return 0;
}
