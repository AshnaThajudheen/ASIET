#include <stdio.h>

// Structure to store process details
typedef struct {
    int id, at, bt, rt, ct, tat, wt, priority;
} Process;

int main() {
    int n, time = 0, completed = 0;
    float total_tat = 0, total_wt = 0;
    Process p[100];
    int gantt[1000], gindex = 0, gantt_time[1000];

    printf("Enter the number of Processes: ");
    scanf("%d", &n);

    printf("\nEnter Arrival Time, Burst Time, and Priority for each process:\n");
    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("P%d Arrival Time: ", i + 1);
        scanf("%d", &p[i].at);
        printf("P%d Burst Time: ", i + 1);
        scanf("%d", &p[i].bt);
        printf("P%d Priority: ", i + 1);
        scanf("%d", &p[i].priority);
        p[i].rt = p[i].bt; // Initialize remaining time
    }

    while (completed < n) {
        int index = -1, highest_priority = -1;

        // Find the process with the highest priority (larger number = higher priority)
        for (int i = 0; i < n; i++) {
            if (p[i].at <= time && p[i].rt > 0 && p[i].priority > highest_priority) {
                highest_priority = p[i].priority;
                index = i;
            }
        }

        if (index == -1) { // No process is ready to execute
            time++;
            continue;
        }

        if (gindex == 0 || gantt[gindex - 1] != p[index].id) {
            gantt[gindex] = p[index].id;
            gantt_time[gindex++] = time;
        }

        p[index].rt--;

        // If process is completed
        if (p[index].rt == 0) {
            completed++;
            p[index].ct = time + 1;
            p[index].tat = p[index].ct - p[index].at;
            p[index].wt = p[index].tat - p[index].bt;
            total_tat += p[index].tat;
            total_wt += p[index].wt;
        }

        time++;
    }
    gantt_time[gindex] = time;

    // Print Process Table
    printf("\nProcess  Arrival  Burst  Priority  Waiting  Turnaround\n");
    for (int i = 0; i < n; i++) {
        printf("P%-7d %-7d %-6d %-8d %-7d %-7d\n", p[i].id, p[i].at, p[i].bt, p[i].priority, p[i].wt, p[i].tat);
    }

    // Print Gantt Chart
    printf("\nGantt Chart:\n---------------------------------\n|");
    for (int i = 0; i < gindex; i++) {
        printf(" P%d |", gantt[i]);
    }
    printf("\n---------------------------------\n");

    for (int i = 0; i <= gindex; i++) {
        printf("%-4d ", gantt_time[i]);
    }
    printf("\n");

    // Print Average TAT and WT
    printf("\nAverage Turnaround Time: %.2f", total_tat / n);
    printf("\nAverage Waiting Time: %.2f\n", total_wt / n);

    return 0;
}

